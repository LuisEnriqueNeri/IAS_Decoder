# Opcoding UTF-8
# SIMULADOR IAS

# Autor: Luis Enrique Neri Pérez
# Matrícula: A01745995

#                                                  REGISTROS
# -------------------------------------------------------------------------------------------------------------------------
# MAR   Memory Access Register        ||
# IR    Instruction Register          ||   Contiene el registro de la primera instrucción opcode de 8 bits
# IBR   Instruction Buffer Register   ||   Contiene el registro de la segunda instrucción opcode de 8 bits
# AR    Address Register              ||   Contiene la primera dirección donde será enviada la información en la memoria
# PC    Program Counter               ||   Contiene la segunda dirección donde será enviada la información en la memoria
# DR    Data Register                 ||   Contiene la palabra que será almacenada en la memoria
# AC    Accumulator                   ||   Usado para operaciones aritméticas, contiene el resultado final
# MQ    Multiplier Quotient           ||   Usado pra operaciones de multiplicación y división, contiene el resultado final
# -------------------------------------------------------------------------------------------------------------------------

# Elementos Globales
bin = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101',
       '1110', '1111']
hexa = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]
direcciones = {"0": "0000000000", "1": "0000000001", "2": "0000000010", "3": "0000000011", "4": "0000000100",
               "5": "0000000101", "6": "0000000110", "7": "0000000111", "8": "0000001000", "9": "0000001001",
               "10": "0000001010", "11": "0000001011", "12": "0000001100", "13": "0000001101", "14": "0000001110",
               "15": "0000001111", "16": "0000010000", "17": "0000010001", "18": "0000010010", "19": "0000010011",
               "20": "0000010100", "21": "0000010101", "22": "0000010110", "23": "0000010111", "24": "0000011000",
               "25": "0000011001", "26": "0000011010", "27": "0000011011", "28": "0000011100", "29": "0000011101",
               "30": "0000011110", "31": "0000011111", "32": "0000100000", "33": "0000100001", "34": "0000100010",
               "35": "0000100011", "36": "0000100100", "37": "0000100101", "38": "0000100110", "39": "0000100111",
               "40": "0000101000", "41": "0000101001", "42": "0000101010", "43": "0000101011", "44": "0000101100",
               "45": "0000101101", "46": "0000101110", "47": "0000101111", "48": "0000110000", "49": "0000110001",
               "50": "0000110010", "51": "0000110011", "52": "0000110100", "53": "0000110101", "54": "0000110110",
               "55": "0000110111", "56": "0000111000", "57": "0000111001", "58": "0000111010", "59": "0000111011",
               "60": "0000111100", "61": "0000111101", "62": "0000111110", "63": "0000111111", "64": "0001000000",
               "65": "0001000001", "66": "0001000010", "67": "0001000011", "68": "0001000100", "69": "0001000101",
               "70": "0001000110", "71": "0001000111", "72": "0001001000", "73": "0001001001", "74": "0001001010",
               "75": "0001001011", "76": "0001001100", "77": "0001001101", "78": "0001001110", "79": "0001001111",
               "80": "0001010000", "81": "0001010001", "82": "0001010010", "83": "0001010011", "84": "0001010100",
               "85": "0001010101", "86": "0001010110", "87": "0001010111", "88": "0001011000", "89": "0001011001",
               "90": "0001011010", "91": "0001011011", "92": "0001011100", "93": "0001011101", "94": "0001011110",
               "95": "0001011111", "96": "0001100000", "97": "0001100001", "98": "0001100010", "99": "0001100011",
               "100": "0001100100", "101": "0001100101", "102": "0001100110", "103": "0001100111", "104": "0001101000",
               "105": "0001101001", "106": "0001101010", "107": "0001101011", "108": "0001101100", "109": "0001101101",
               "110": "0001101110", "111": "0001101111", "112": "0001110000", "113": "0001110001", "114": "0001110010",
               "115": "0001110011", "116": "0001110100", "117": "0001110101", "118": "0001110110", "119": "0001110111",
               "120": "0001111000", "121": "0001111001", "122": "0001111010", "123": "0001111011", "124": "0001111100",
               "125": "0001111101", "126": "0001111110", "127": "0001111111", "128": "0010000000", "129": "0010000001",
               "130": "0010000010", "131": "0010000011", "132": "0010000100", "133": "0010000101", "134": "0010000110",
               "135": "0010000111", "136": "0010001000", "137": "0010001001", "138": "0010001010", "139": "0010001011",
               "140": "0010001100", "141": "0010001101", "142": "0010001110", "143": "0010001111", "144": "0010010000",
               "145": "0010010001", "146": "0010010010", "147": "0010010011", "148": "0010010100", "149": "0010010101",
               "150": "0010010110", "151": "0010010111", "152": "0010011000", "153": "0010011001", "154": "0010011010",
               "155": "0010011011", "156": "0010011100", "157": "0010011101", "158": "0010011110", "159": "0010011111",
               "160": "0010100000", "161": "0010100001", "162": "0010100010", "163": "0010100011", "164": "0010100100",
               "165": "0010100101", "166": "0010100110", "167": "0010100111", "168": "0010101000", "169": "0010101001",
               "170": "0010101010", "171": "0010101011", "172": "0010101100", "173": "0010101101", "174": "0010101110",
               "175": "0010101111", "176": "0010110000", "177": "0010110001", "178": "0010110010", "179": "0010110011",
               "180": "0010110100", "181": "0010110101", "182": "0010110110", "183": "0010110111", "184": "0010111000",
               "185": "0010111001", "186": "0010111010", "187": "0010111011", "188": "0010111100", "189": "0010111101",
               "190": "0010111110", "191": "0010111111", "192": "0011000000", "193": "0011000001", "194": "0011000010",
               "195": "0011000011", "196": "0011000100", "197": "0011000101", "198": "0011000110", "199": "0011000111",
               "200": "0011001000", "201": "0011001001", "202": "0011001010", "203": "0011001011", "204": "0011001100",
               "205": "0011001101", "206": "0011001110", "207": "0011001111", "208": "0011010000", "209": "0011010001",
               "210": "0011010010", "211": "0011010011", "212": "0011010100", "213": "0011010101", "214": "0011010110",
               "215": "0011010111", "216": "0011011000", "217": "0011011001", "218": "0011011010", "219": "0011011011",
               "220": "0011011100", "221": "0011011101", "222": "0011011110", "223": "0011011111", "224": "0011100000",
               "225": "0011100001", "226": "0011100010", "227": "0011100011", "228": "0011100100", "229": "0011100101",
               "230": "0011100110", "231": "0011100111", "232": "0011101000", "233": "0011101001", "234": "0011101010",
               "235": "0011101011", "236": "0011101100", "237": "0011101101", "238": "0011101110", "239": "0011101111",
               "240": "0011110000", "241": "0011110001", "242": "0011110010", "243": "0011110011", "244": "0011110100",
               "245": "0011110101", "246": "0011110110", "247": "0011110111", "248": "0011111000", "249": "0011111001",
               "250": "0011111010", "251": "0011111011", "252": "0011111100", "253": "0011111101", "254": "0011111110",
               "255": "0011111111", "256": "0100000000", "257": "0100000001", "258": "0100000010", "259": "0100000011",
               "260": "0100000100", "261": "0100000101", "262": "0100000110", "263": "0100000111", "264": "0100001000",
               "265": "0100001001", "266": "0100001010", "267": "0100001011", "268": "0100001100", "269": "0100001101",
               "270": "0100001110", "271": "0100001111", "272": "0100010000", "273": "0100010001", "274": "0100010010",
               "275": "0100010011", "276": "0100010100", "277": "0100010101", "278": "0100010110", "279": "0100010111",
               "280": "0100011000", "281": "0100011001", "282": "0100011010", "283": "0100011011", "284": "0100011100",
               "285": "0100011101", "286": "0100011110", "287": "0100011111", "288": "0100100000", "289": "0100100001",
               "290": "0100100010", "291": "0100100011", "292": "0100100100", "293": "0100100101", "294": "0100100110",
               "295": "0100100111", "296": "0100101000", "297": "0100101001", "298": "0100101010", "299": "0100101011",
               "300": "0100101100", "301": "0100101101", "302": "0100101110", "303": "0100101111", "304": "0100110000",
               "305": "0100110001", "306": "0100110010", "307": "0100110011", "308": "0100110100", "309": "0100110101",
               "310": "0100110110", "311": "0100110111", "312": "0100111000", "313": "0100111001", "314": "0100111010",
               "315": "0100111011", "316": "0100111100", "317": "0100111101", "318": "0100111110", "319": "0100111111",
               "320": "0101000000", "321": "0101000001", "322": "0101000010", "323": "0101000011", "324": "0101000100",
               "325": "0101000101", "326": "0101000110", "327": "0101000111", "328": "0101001000", "329": "0101001001",
               "330": "0101001010", "331": "0101001011", "332": "0101001100", "333": "0101001101", "334": "0101001110",
               "335": "0101001111", "336": "0101010000", "337": "0101010001", "338": "0101010010", "339": "0101010011",
               "340": "0101010100", "341": "0101010101", "342": "0101010110", "343": "0101010111", "344": "0101011000",
               "345": "0101011001", "346": "0101011010", "347": "0101011011", "348": "0101011100", "349": "0101011101",
               "350": "0101011110", "351": "0101011111", "352": "0101100000", "353": "0101100001", "354": "0101100010",
               "355": "0101100011", "356": "0101100100", "357": "0101100101", "358": "0101100110", "359": "0101100111",
               "360": "0101101000", "361": "0101101001", "362": "0101101010", "363": "0101101011", "364": "0101101100",
               "365": "0101101101", "366": "0101101110", "367": "0101101111", "368": "0101110000", "369": "0101110001",
               "370": "0101110010", "371": "0101110011", "372": "0101110100", "373": "0101110101", "374": "0101110110",
               "375": "0101110111", "376": "0101111000", "377": "0101111001", "378": "0101111010", "379": "0101111011",
               "380": "0101111100", "381": "0101111101", "382": "0101111110", "383": "0101111111", "384": "0110000000",
               "385": "0110000001", "386": "0110000010", "387": "0110000011", "388": "0110000100", "389": "0110000101",
               "390": "0110000110", "391": "0110000111", "392": "0110001000", "393": "0110001001", "394": "0110001010",
               "395": "0110001011", "396": "0110001100", "397": "0110001101", "398": "0110001110", "399": "0110001111",
               "400": "0110010000", "401": "0110010001", "402": "0110010010", "403": "0110010011", "404": "0110010100",
               "405": "0110010101", "406": "0110010110", "407": "0110010111", "408": "0110011000", "409": "0110011001",
               "410": "0110011010", "411": "0110011011", "412": "0110011100", "413": "0110011101", "414": "0110011110",
               "415": "0110011111", "416": "0110100000", "417": "0110100001", "418": "0110100010", "419": "0110100011",
               "420": "0110100100", "421": "0110100101", "422": "0110100110", "423": "0110100111", "424": "0110101000",
               "425": "0110101001", "426": "0110101010", "427": "0110101011", "428": "0110101100", "429": "0110101101",
               "430": "0110101110", "431": "0110101111", "432": "0110110000", "433": "0110110001", "434": "0110110010",
               "435": "0110110011", "436": "0110110100", "437": "0110110101", "438": "0110110110", "439": "0110110111",
               "440": "0110111000", "441": "0110111001", "442": "0110111010", "443": "0110111011", "444": "0110111100",
               "445": "0110111101", "446": "0110111110", "447": "0110111111", "448": "0111000000", "449": "0111000001",
               "450": "0111000010", "451": "0111000011", "452": "0111000100", "453": "0111000101", "454": "0111000110",
               "455": "0111000111", "456": "0111001000", "457": "0111001001", "458": "0111001010", "459": "0111001011",
               "460": "0111001100", "461": "0111001101", "462": "0111001110", "463": "0111001111", "464": "0111010000",
               "465": "0111010001", "466": "0111010010", "467": "0111010011", "468": "0111010100", "469": "0111010101",
               "470": "0111010110", "471": "0111010111", "472": "0111011000", "473": "0111011001", "474": "0111011010",
               "475": "0111011011", "476": "0111011100", "477": "0111011101", "478": "0111011110", "479": "0111011111",
               "480": "0111100000", "481": "0111100001", "482": "0111100010", "483": "0111100011", "484": "0111100100",
               "485": "0111100101", "486": "0111100110", "487": "0111100111", "488": "0111101000", "489": "0111101001",
               "490": "0111101010", "491": "0111101011", "492": "0111101100", "493": "0111101101", "494": "0111101110",
               "495": "0111101111", "496": "0111110000", "497": "0111110001", "498": "0111110010", "499": "0111110011",
               "500": "0111110100", "501": "0111110101", "502": "0111110110", "503": "0111110111", "504": "0111111000",
               "505": "0111111001", "506": "0111111010", "507": "0111111011", "508": "0111111100", "509": "0111111101",
               "510": "0111111110", "511": "0111111111", "512": "1000000000", "513": "1000000001", "514": "1000000010",
               "515": "1000000011", "516": "1000000100", "517": "1000000101", "518": "1000000110", "519": "1000000111",
               "520": "1000001000", "521": "1000001001", "522": "1000001010", "523": "1000001011", "524": "1000001100",
               "525": "1000001101", "526": "1000001110", "527": "1000001111", "528": "1000010000", "529": "1000010001",
               "530": "1000010010", "531": "1000010011", "532": "1000010100", "533": "1000010101", "534": "1000010110",
               "535": "1000010111", "536": "1000011000", "537": "1000011001", "538": "1000011010", "539": "1000011011",
               "540": "1000011100", "541": "1000011101", "542": "1000011110", "543": "1000011111", "544": "1000100000",
               "545": "1000100001", "546": "1000100010", "547": "1000100011", "548": "1000100100", "549": "1000100101",
               "550": "1000100110", "551": "1000100111", "552": "1000101000", "553": "1000101001", "554": "1000101010",
               "555": "1000101011", "556": "1000101100", "557": "1000101101", "558": "1000101110", "559": "1000101111",
               "560": "1000110000", "561": "1000110001", "562": "1000110010", "563": "1000110011", "564": "1000110100",
               "565": "1000110101", "566": "1000110110", "567": "1000110111", "568": "1000111000", "569": "1000111001",
               "570": "1000111010", "571": "1000111011", "572": "1000111100", "573": "1000111101", "574": "1000111110",
               "575": "1000111111", "576": "1001000000", "577": "1001000001", "578": "1001000010", "579": "1001000011",
               "580": "1001000100", "581": "1001000101", "582": "1001000110", "583": "1001000111", "584": "1001001000",
               "585": "1001001001", "586": "1001001010", "587": "1001001011", "588": "1001001100", "589": "1001001101",
               "590": "1001001110", "591": "1001001111", "592": "1001010000", "593": "1001010001", "594": "1001010010",
               "595": "1001010011", "596": "1001010100", "597": "1001010101", "598": "1001010110", "599": "1001010111",
               "600": "1001011000", "601": "1001011001", "602": "1001011010", "603": "1001011011", "604": "1001011100",
               "605": "1001011101", "606": "1001011110", "607": "1001011111", "608": "1001100000", "609": "1001100001",
               "610": "1001100010", "611": "1001100011", "612": "1001100100", "613": "1001100101", "614": "1001100110",
               "615": "1001100111", "616": "1001101000", "617": "1001101001", "618": "1001101010", "619": "1001101011",
               "620": "1001101100", "621": "1001101101", "622": "1001101110", "623": "1001101111", "624": "1001110000",
               "625": "1001110001", "626": "1001110010", "627": "1001110011", "628": "1001110100", "629": "1001110101",
               "630": "1001110110", "631": "1001110111", "632": "1001111000", "633": "1001111001", "634": "1001111010",
               "635": "1001111011", "636": "1001111100", "637": "1001111101", "638": "1001111110", "639": "1001111111",
               "640": "1010000000", "641": "1010000001", "642": "1010000010", "643": "1010000011", "644": "1010000100",
               "645": "1010000101", "646": "1010000110", "647": "1010000111", "648": "1010001000", "649": "1010001001",
               "650": "1010001010", "651": "1010001011", "652": "1010001100", "653": "1010001101", "654": "1010001110",
               "655": "1010001111", "656": "1010010000", "657": "1010010001", "658": "1010010010", "659": "1010010011",
               "660": "1010010100", "661": "1010010101", "662": "1010010110", "663": "1010010111", "664": "1010011000",
               "665": "1010011001", "666": "1010011010", "667": "1010011011", "668": "1010011100", "669": "1010011101",
               "670": "1010011110", "671": "1010011111", "672": "1010100000", "673": "1010100001", "674": "1010100010",
               "675": "1010100011", "676": "1010100100", "677": "1010100101", "678": "1010100110", "679": "1010100111",
               "680": "1010101000", "681": "1010101001", "682": "1010101010", "683": "1010101011", "684": "1010101100",
               "685": "1010101101", "686": "1010101110", "687": "1010101111", "688": "1010110000", "689": "1010110001",
               "690": "1010110010", "691": "1010110011", "692": "1010110100", "693": "1010110101", "694": "1010110110",
               "695": "1010110111", "696": "1010111000", "697": "1010111001", "698": "1010111010", "699": "1010111011",
               "700": "1010111100", "701": "1010111101", "702": "1010111110", "703": "1010111111", "704": "1011000000",
               "705": "1011000001", "706": "1011000010", "707": "1011000011", "708": "1011000100", "709": "1011000101",
               "710": "1011000110", "711": "1011000111", "712": "1011001000", "713": "1011001001", "714": "1011001010",
               "715": "1011001011", "716": "1011001100", "717": "1011001101", "718": "1011001110", "719": "1011001111",
               "720": "1011010000", "721": "1011010001", "722": "1011010010", "723": "1011010011", "724": "1011010100",
               "725": "1011010101", "726": "1011010110", "727": "1011010111", "728": "1011011000", "729": "1011011001",
               "730": "1011011010", "731": "1011011011", "732": "1011011100", "733": "1011011101", "734": "1011011110",
               "735": "1011011111", "736": "1011100000", "737": "1011100001", "738": "1011100010", "739": "1011100011",
               "740": "1011100100", "741": "1011100101", "742": "1011100110", "743": "1011100111", "744": "1011101000",
               "745": "1011101001", "746": "1011101010", "747": "1011101011", "748": "1011101100", "749": "1011101101",
               "750": "1011101110", "751": "1011101111", "752": "1011110000", "753": "1011110001", "754": "1011110010",
               "755": "1011110011", "756": "1011110100", "757": "1011110101", "758": "1011110110", "759": "1011110111",
               "760": "1011111000", "761": "1011111001", "762": "1011111010", "763": "1011111011", "764": "1011111100",
               "765": "1011111101", "766": "1011111110", "767": "1011111111", "768": "1100000000", "769": "1100000001",
               "770": "1100000010", "771": "1100000011", "772": "1100000100", "773": "1100000101", "774": "1100000110",
               "775": "1100000111", "776": "1100001000", "777": "1100001001", "778": "1100001010", "779": "1100001011",
               "780": "1100001100", "781": "1100001101", "782": "1100001110", "783": "1100001111", "784": "1100010000",
               "785": "1100010001", "786": "1100010010", "787": "1100010011", "788": "1100010100", "789": "1100010101",
               "790": "1100010110", "791": "1100010111", "792": "1100011000", "793": "1100011001", "794": "1100011010",
               "795": "1100011011", "796": "1100011100", "797": "1100011101", "798": "1100011110", "799": "1100011111",
               "800": "1100100000", "801": "1100100001", "802": "1100100010", "803": "1100100011", "804": "1100100100",
               "805": "1100100101", "806": "1100100110", "807": "1100100111", "808": "1100101000", "809": "1100101001",
               "810": "1100101010", "811": "1100101011", "812": "1100101100", "813": "1100101101", "814": "1100101110",
               "815": "1100101111", "816": "1100110000", "817": "1100110001", "818": "1100110010", "819": "1100110011",
               "820": "1100110100", "821": "1100110101", "822": "1100110110", "823": "1100110111", "824": "1100111000",
               "825": "1100111001", "826": "1100111010", "827": "1100111011", "828": "1100111100", "829": "1100111101",
               "830": "1100111110", "831": "1100111111", "832": "1101000000", "833": "1101000001", "834": "1101000010",
               "835": "1101000011", "836": "1101000100", "837": "1101000101", "838": "1101000110", "839": "1101000111",
               "840": "1101001000", "841": "1101001001", "842": "1101001010", "843": "1101001011", "844": "1101001100",
               "845": "1101001101", "846": "1101001110", "847": "1101001111", "848": "1101010000", "849": "1101010001",
               "850": "1101010010", "851": "1101010011", "852": "1101010100", "853": "1101010101", "854": "1101010110",
               "855": "1101010111", "856": "1101011000", "857": "1101011001", "858": "1101011010", "859": "1101011011",
               "860": "1101011100", "861": "1101011101", "862": "1101011110", "863": "1101011111", "864": "1101100000",
               "865": "1101100001", "866": "1101100010", "867": "1101100011", "868": "1101100100", "869": "1101100101",
               "870": "1101100110", "871": "1101100111", "872": "1101101000", "873": "1101101001", "874": "1101101010",
               "875": "1101101011", "876": "1101101100", "877": "1101101101", "878": "1101101110", "879": "1101101111",
               "880": "1101110000", "881": "1101110001", "882": "1101110010", "883": "1101110011", "884": "1101110100",
               "885": "1101110101", "886": "1101110110", "887": "1101110111", "888": "1101111000", "889": "1101111001",
               "890": "1101111010", "891": "1101111011", "892": "1101111100", "893": "1101111101", "894": "1101111110",
               "895": "1101111111", "896": "1110000000", "897": "1110000001", "898": "1110000010", "899": "1110000011",
               "900": "1110000100", "901": "1110000101", "902": "1110000110", "903": "1110000111", "904": "1110001000",
               "905": "1110001001", "906": "1110001010", "907": "1110001011", "908": "1110001100", "909": "1110001101",
               "910": "1110001110", "911": "1110001111", "912": "1110010000", "913": "1110010001", "914": "1110010010",
               "915": "1110010011", "916": "1110010100", "917": "1110010101", "918": "1110010110", "919": "1110010111",
               "920": "1110011000", "921": "1110011001", "922": "1110011010", "923": "1110011011", "924": "1110011100",
               "925": "1110011101", "926": "1110011110", "927": "1110011111", "928": "1110100000", "929": "1110100001",
               "930": "1110100010", "931": "1110100011", "932": "1110100100", "933": "1110100101", "934": "1110100110",
               "935": "1110100111", "936": "1110101000", "937": "1110101001", "938": "1110101010", "939": "1110101011",
               "940": "1110101100", "941": "1110101101", "942": "1110101110", "943": "1110101111", "944": "1110110000",
               "945": "1110110001", "946": "1110110010", "947": "1110110011", "948": "1110110100", "949": "1110110101",
               "950": "1110110110", "951": "1110110111", "952": "1110111000", "953": "1110111001", "954": "1110111010",
               "955": "1110111011", "956": "1110111100", "957": "1110111101", "958": "1110111110", "959": "1110111111",
               "960": "1111000000", "961": "1111000001", "962": "1111000010", "963": "1111000011", "964": "1111000100",
               "965": "1111000101", "966": "1111000110", "967": "1111000111", "968": "1111001000", "969": "1111001001",
               "970": "1111001010", "971": "1111001011", "972": "1111001100", "973": "1111001101", "974": "1111001110",
               "975": "1111001111", "976": "1111010000", "977": "1111010001", "978": "1111010010", "979": "1111010011",
               "980": "1111010100", "981": "1111010101", "982": "1111010110", "983": "1111010111", "984": "1111011000",
               "985": "1111011001", "986": "1111011010", "987": "1111011011", "988": "1111011100", "989": "1111011101",
               "990": "1111011110", "991": "1111011111", "992": "1111100000", "993": "1111100001", "994": "1111100010",
               "995": "1111100011", "996": "1111100100", "997": "1111100101", "998": "1111100110", "999": "1111100111"} # Contiene los espacios de 0-999 en memoria
archivos = ["sucesionesA.txt","sucesionesA1.txt" ,"sucesionesG.txt","sucesionesG1.txt", "comprobarSA.txt"]
stack = []

# Verifica que los dígitos ingresados estén en formato Hexadecimal
def validarHex(order):
    for i in range(len(order)):
        if order[i] not in hexa:
            return False
    return True

# Convierte de hexadecimal a binario los dígitos ingresados
def convertirHexABinario(order, instruccionB):
    for i in order:
        index = hexa.index(i)
        instruccionB.append(bin[index])

# Función que ejecuta las instrucciones IAS
def binarioADecimal(add):
    dig = list(str(add))
    dig.reverse()
    w = ""
    while len(dig) < 16:
        dig.append("0")
    dig.reverse()
    if len(dig)>= 17:
        dig.reverse()
        dec = 0
        for k in range(len(dig) - 1):
            x = 2 * int(dig[k])
            if x == 2:
                dec += x ** k
        dec = -dec
        return dec
    else:
        dig.reverse()
        dec = 0
        for k in range(len(dig) - 1):
            x = 2 * int(dig[k])
            if x == 2:
                dec += x ** k
        return dec


def decimalABinario(numb):
    x = int(numb)
    binario = []
    if x >= 0:
        while not x == 0:
            y = x % 2
            x = x // 2
            binario.append(str(y))
        w = ""
        while len(binario) < 16:
            binario.append("0")
        binario.reverse()
        w = "".join(binario)
        return w
    elif x < 0:
        x = -x
        while not x == 0:
            y = x % 2
            x = x // 2
            binario.append(str(y))
        w = ""
        while len(binario) < 16:
            binario.append("0")
        binario.reverse()
        w = "1" + "".join(binario)
        return w


# Recibe la entrada del usuario convertida a binario para procesar la acción que el usuario desea hacer
def ejecutarInstrucciones(opc, dir, pC, opcode, address, aC, mQ):
    xC = pC
    # TRANSFERENCIA DE DATOS -------------------------------------------------------------------------------------------

    # LOAD MQ: Transfiere el registro de MQ al acumulador AC
    if opc == "00001010":
        aC = mQ
        print("LOAD MQ:\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # LOAD MQ, M(X): Transfiere el registro de la dirección M(X) a MQ
    elif opc == "00001001":
        dec = int(binarioADecimal(dir))
        mQ = direcciones[str(dec)]
        print("LOAD MQ, M(", dec, "):\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # STOR M(X): Transfiere el registro del acumulador AC a la dirección X
    elif opc == "00100001":
        dec = binarioADecimal(dir)
        direcciones[dec] = aC
        print("STOR M(", dec, "):\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # LOAD M(X): Transfiere M(X) AL ACUMULADOR
    elif opc == "00000001":
        dec = binarioADecimal(dir)
        aC = direcciones[str(dec)]
        stack.append(binarioADecimal(aC))
        print("LOAD M(", dec, "):\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # LOAD -M(X): Se transfiere -M(X) al acumulador
    elif opc == "00000010":
        dec = binarioADecimal(dir)
        aC = direcciones[str(dec)]
        lista = list(aC)
        if lista[0] == "0":  # Si el registro es positivo se vuelve negativo
            f = "1"
            for k in range(1, len(lista)):
                f += lista[k]
        elif lista[0] == "1":  # Si el registro es negativo se vuelve positivo
            f = "0"
            for k in range(1, len(lista)):
                f += lista[k]
        aC = f
        print("LOAD -M(", dec, "):\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # LOAD |M(X)|: Se transfiere |M(X)| al acumulador
    elif opc == "00000011":
        dec = binarioADecimal(dir)
        aC = direcciones[str(dec)]
        lista = list(aC)
        f = "0"
        for k in range(1, len(lista)):
            f += lista[k]
        aC = f
        print("LOAD |M(", dec, ")|:\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # LOAD -|M(X)|: Se transfiere -|M(X)| al acumulador
    elif opc == "00000100":
        dec = binarioADecimal(dir)
        aC = direcciones[str(dec)]
        lista = list(aC)
        f = "1"
        for k in range(1, len(lista)):
            f += lista[k]
        aC = f
        print("LOAD -|M(", dec, ")|:\n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # RAMA INCONDICIONAL------------------------------------------------------------------------------------------------

    # JUMP M(X, 0:19): Tomar la siguiente instrucción de la mitad izquierda de M(X)
    elif opc == "00001101":
        pC = int(binarioADecimal(dir))
        print("JUMP M(", pC, ", 0:19):")
        opc = opcode[pC]
        dir = address[pC]
        aC, mQ, pC = ejecutarInstrucciones(opc, dir, pC, opcode, address, aC, mQ)

    # JUMP M(X, 20:39): Tomar la siguiente instrucción de la mitad derecha de M(X)
    elif opc == "00001110":
        pC = int(binarioADecimal(dir))
        print("JUMP M(", pC, ", 20:39):")
        opc = opcode[pC]
        dir = address[pC]
        aC, mQ, pC = ejecutarInstrucciones(opc, dir, pC + 1, opcode, address, aC, mQ)

    # RAMA CONDICIONAL--------------------------------------------------------------------------------------------------

    # JUMP  + M(X, 0:19): Si el acumulador AC es positivo, tomar la siguiente instrucción de la mitad izquierda de M(X)
    elif opc == "00001111":
        pC = int(binarioADecimal(dir))
        mQ = int(binarioADecimal(mQ))-1
        opc = opcode[pC]
        dir = address[pC]
        while int(mQ) > int(0):
            print("JUMP + M(", pC, ", 0:19):")
            mQ = str(decimalABinario(mQ))
            aC, mQ, pC = ejecutarInstrucciones(opc, dir, pC, opcode, address, aC, mQ)
            mQ = binarioADecimal(mQ)
            mQ = int(mQ) - 1

    # JUMP  + M(X, 20:39): Si el acumulador AC es positivo, tomar la siguiente instrucción de la mitad derecha de M(X)
    elif opc == "00010000":
        pC = int(binarioADecimal(dir))
        mQ = int(binarioADecimal(mQ))-1
        opc = opcode[pC]
        dir = address[pC]
        while int(mQ) > int(0):
            print("JUMP + M(", pC, ", 20:39):")
            mQ = str(decimalABinario(mQ))
            aC, mQ, pC = ejecutarInstrucciones(opc, dir, pC, opcode, address, aC, mQ)
            mQ = binarioADecimal(mQ)
            mQ = int(mQ) - 1

    # ARITMÉTICA--------------------------------------------------------------------------------------------------------

    # ADD M(X): Suma M(X) a AC, guardando el resultado en AC
    elif opc == "00000101":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        r = int(binarioADecimal(l))  # M(X) a decimal
        y = z + r
        stack.append(y)
        aC = decimalABinario(y)
        print("ADD M(", x, "):  M(X) + AC =", z, " + ", r, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # ADD |M(X)|: Suma |M(X)| a AC, guardando el resultado en AC
    elif opc == "00000111":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        g = list(l)
        g[0] = "0"
        l = "".join(g)
        r = int(binarioADecimal(l))  # M(X) a decimal
        y = z + r
        stack.append(y)
        aC = decimalABinario(y)
        print("ADD |M(", x, ")|:  |M(X)| + AC =", z, " + ", r, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # SUB M(X): Resta M(X) a AC, guardando el resultado en AC
    elif opc == "00000110":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        r = int(binarioADecimal(l))  # M(X) a decimal
        y = z - r
        stack.append(y)
        aC = decimalABinario(y)
        print("SUB M(", x, "):  M(X) - AC =", z, " - ", r, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # SUB |M(X)|: Resta |M(X)| a AC, guardando el resultado en AC
    elif opc == "00001000":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        g = list(l)
        g[0] = "0"
        l = "".join(g)
        r = int(binarioADecimal(l))  # |M(X)| a decimal
        y = z - r
        stack.append(y)
        aC = decimalABinario(y)
        print("SUB |M(", x, ")|:  |M(X)| - AC =", z, " - ", r, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # MUL M(X): Multiplica M(X) por MQ, guardando los bits más significativos en AC y los menos significativos en MQ
    elif opc == "00001011":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        r = int(binarioADecimal(l))  # M(X) a decimal
        y = z * r
        stack.append(y)
        aC = decimalABinario(y)
        print("MUL M(", x, "):  M(X) * AC =", r, " * ", z, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # DIV M(X): Divide M(X) entre MQ, guardando el resto en AC y el cociente en MQ
    elif opc == "00001100":
        x = int(binarioADecimal(dir))  # Dirección a decimal
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        l = direcciones[str(x)]  # M(X)
        r = int(binarioADecimal(l))  # M(X) a decimal
        y = int(z) // int(r)
        g = int(z) % int(r)
        stack.append(y)
        aC = decimalABinario(y)
        print("DIV M(", x, "):  AC / M(X) =", z, " / ", r, " = ", y, "\n                 AC=", aC, "  MQ=", mQ,
              "  M(X)=", dir)

    # LSH: Multiplica al acumulador AC por 2
    elif opc == "00010100":
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        y = z * 2
        aC = decimalABinario(y)
        print("LSH: \n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # RSH: Divide al acumulador AC por 2
    elif opc == "00010101":
        z = int(binarioADecimal(int(aC)))  # Acumulador a decimal
        y = z // 2
        aC = decimalABinario(y)
        print("RSH: \n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # MODIFICAR DIRECCIÓN-----------------------------------------------------------------------------------------------

    # STOR M(X,8:19): Remplaza  dirección izquierda de M(X) por los 12 bits a la derecha de AC
    elif opc == "00010010":
        rb = list(aC)
        rb.reverse()
        acF = []
        for k in range(12):
            acF += rb[k]
        acF.reverse()
        aC = "".join(acF)
        address[pC - 1] = aC
        x = int(binarioADecimal(dir))

        print("STOR M(AC) ): \n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)

    # STOR M(X, 28:39): Remplaza  dirección derecha de M(X) por los 12 bits a la derecha de AC
    elif opc == "00010011":
        rb = list(aC)
        rb.reverse()
        acF = []
        for k in range(12):
            acF += rb[k]
        acF.reverse()
        aC = "".join(acF)
        address[pC - 1] = aC
        x = int(binarioADecimal(dir))
        print("STOR M(", x, ", 28:39): \n                 AC=", aC, "  MQ=", mQ, "  M(X)=", dir)
    elif opc == "00010011":
        pass
    return aC, mQ, pC




# Función principal
def main():
    print("\n                             UNIDAD LÓGICO-ARITMÉTICA: DECODIFICADOR IAS")
    print(
        "-----------------------------------------------------------------------------------------------------------  \n")
    print(
        "Bienvenido al decodificador IAS. Escribe las instrucciones de 10 hexadecimales (dos instrucciones por línea) que deseas ejecutar.\nEscribe 'EJECUTAR' para decodificar las instrucciones. Para leer un programa predeterminado en la consola escribe 'LEER' Para salir,\nescribe 'SALIR'.\n")
    order = input("Instrucción: ")
    order = order.upper()

    aC = 0
    mQ = 0
    instrucciones = open("instrucciones.txt", "w")
    instrucciones.close()

    while order != "EJECUTAR" and order != "SALIR" and order != "LEER":
        order = list(order)
        if len(order) > 10 or len(order) < 10:
            print("\nInstrucción errónea, intente de nuevo.\n")
        else:
            vH = validarHex(order)
            if vH == True:
                instruccionB = []
                convertirHexABinario(order, instruccionB)
                instrucciones = open("instrucciones.txt", "a")
                palabra = ""
                for i in range(10):
                    palabra += instruccionB[i] + " "
                palabra += "\n"
                instrucciones.write(palabra)
                instrucciones.close()
            elif vH == False:
                print("\nInstrucción errónea, intente de nuevo\n")
        order = input("Instrucción: ").upper()

    if order == "LEER":
        print("--------------------------------------------------------------------------------------------------  \n")
        print("                                    PROGRAMAS DISPONIBLES\n")
        print("1) Sucesión aritmérica 2 en 2")
        print("2) Sucesión aritmérica -3 en -3")
        print("3) Sucesión geométrica 3 por 3")
        print("4) Sucesión geométrica 5 entre 5\n")
        print("--------------------------------------------------------------------------------------------------  \n")
        archivo = int(input("Escribe el número del archivo que deseas abrir: "))-1
        if archivo < 0 or archivo>len(archivos)-1:
            while archivo < 0 or archivo>(len(archivos)-1):
                archivo = int(input("Archivo no válido. Escribe el número de un archivo disponible: "))
        instrucciones = open(archivos[archivo], "r")
        lista = instrucciones.readlines()
        instrucciones.close()
        if archivo == 0:
            print("\n                                  SUCECIÓN ARITMÉTICA 2 EN 2\n")
        for l in range(0, len(lista)):
            inst = lista[l].split()
            order = inst[0]
            order = list(order)
            if len(order) > 10 or len(order) < 10:
                print("\nInstrucción", l + 1, "errónea\n")
            else:
                vH = validarHex(order)
                if vH == True:
                    instruccionB = []
                    convertirHexABinario(order, instruccionB)
                    instrucciones = open("instrucciones.txt", "a")
                    palabra = ""
                    for i in range(10):
                        palabra += instruccionB[i] + " "
                    palabra += "\n"
                    instrucciones.write(palabra)
                    instrucciones.close()
                elif vH == False:
                    print("\nInstrucción", l + 1, "errónea\n")
        order = "EJECUTAR"
    if order == "EJECUTAR":
        print("\n--------------------------------------------------------------------------------------------------  \n")
        print("                                      INSTRUCCIONES IAS\n")
        instrucciones = open("instrucciones.txt", "r")
        lista = instrucciones.readlines()
        instrucciones.close()
        instrucciones = open("instrucciones.txt", "w")
        instrucciones.close()
        opcode = []
        address = []

        # Establecen los valores de los opcode (8 bits) y direcciones (12 bits)
        for i in range(0, len(lista)):  # Separa y ordena los opcode y direcciones
            inst = lista[i].split()
            opcode.append(inst[0] + inst[1])
            address.append(inst[2] + inst[3] + inst[4])
            opcode.append(inst[5] + inst[6])
            address.append(inst[7] + inst[8] + inst[9])

        pC = 0
        while not pC >= len(opcode):
            # DIRECCIÓN
            iR = opcode[0 + pC]  # Opcode
            aR = address[0 + pC]  # Dirección
            aC, mQ, pC = ejecutarInstrucciones(iR, aR, pC, opcode, address, aC, mQ)

            # DIRECCIÓN DERECHA
            iR = opcode[1 + pC]  # Opcode
            aR = address[1 + pC]  # Dirección
            aC, mQ, pC = ejecutarInstrucciones(iR, aR, pC, opcode, address, aC, mQ)
            pC += 2

        print("\nSTACK =", stack)
        print("\nProceso terminado...")
        print("\n--------------------------------------------------------------------------------------------------")
    print("\n¡HASTA LUEGO!")

main()